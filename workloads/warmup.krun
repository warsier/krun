import os
from krun.vm_defs import (PyPyVMDef, JavaVMDef, GraalVMDef, NativeCodeVMDef)
from krun import EntryPoint
from krun.util import fatal
from distutils.spawn import find_executable

# Who to mail
MAIL_TO = ["t-yizwei@microsoft.com"]

# Maximum number of error emails to send per-run
MAX_MAILS = 2

DIR = os.getcwd()
JKRUNTIME_DIR = os.path.join(DIR, "krun", "libkruntime", "")

HEAP_LIMIT = 2097152  # KiB
STACK_LIMIT = 8192  # KiB

# Variant name -> EntryPoint
VARIANTS = {
    "default-c": EntryPoint("bench.so", subdir="c"),
    "default-python": EntryPoint("bench.py", subdir="python"),
    "default-java": EntryPoint("KrunEntry", subdir="java"),
}

ITERATIONS_ALL_VMS = 2000  # Small number for testing.

VMS = {
    'C': {
        'vm_def': NativeCodeVMDef(),
        'variants': ['default-c'],
        'n_iterations': ITERATIONS_ALL_VMS,
    },
    'PyPy': {
        'vm_def': PyPyVMDef("/usr/bin/pypy"),
        'variants': ['default-python'],
        'n_iterations': ITERATIONS_ALL_VMS,
    },
    'Java': {
        'vm_def': JavaVMDef("/usr/bin/java"),
        'variants': ['default-java'],
        'n_iterations': ITERATIONS_ALL_VMS,
    },
    'Graal': {
        'vm_def': JavaVMDef("/home/admin/Documents/graalvm-ce-19.0.2/bin/java"),
        'variants': ['default-java'],
        'n_iterations': ITERATIONS_ALL_VMS,
    },
}


BENCHMARKS = {
    'binarytrees': 25,
    'richards': 500,
    'spectralnorm': 3,
    'nbody': 15,
    'fasta': 100,
    'fannkuch_redux': 200,
}

# list of "bench:vm:variant"
SKIP = [
    "*:C:*",
    "*:PyPy:*",
    #"*:Java:*",
    "*:Graal:*",
]

N_EXECUTIONS = 30  # Number of fresh processes.

# No. of seconds to wait before taking the initial temperature reading.
# You should set this high enough for the system to cool down a bit.
# The default (if omitted) is 60 seconds.
#TEMP_READ_PAUSE = 1

# Commands to run before and after each process execution
#
# Environment available for these commands:
#   KRUN_RESULTS_FILE: path to results file.
#   KRUN_LOG_FILE: path to log file.
#   KRUN_ETA_DATUM: time the ETA was computed
#   KRUN_ETA_VALUE: estimated time of completion
#PRE_EXECUTION_CMDS = ["sudo service cron stop"]
#POST_EXECUTION_CMDS = ["sudo service cron start"]

PRE_EXECUTION_CMDS = [
        # Stop network first. If an interface accepts a DHCP lease during one
        # of the later commands below, it can cause the command to be
        # "cancelled" by systemd. Bringing the network itself down can fail in
        # the same way, so keep trying (with sleeps between).
        #"while true; do sudo systemctl stop networking; sleep 5; ping -q -c 10 %s || break; done" % PING_HOST,
        "sudo systemctl stop cron",
        "sudo systemctl stop atd",
        "sudo systemctl stop sendmail",
    ]

POST_EXECUTION_CMDS = [
    # The network doesn't always come up properly on debian. We keep trying
    # until we can ping a host on the network.
    #"while true; do ping -c 3 -q %s && break; sudo systemctl stop networking; sleep 5; sudo systemctl start networking; done" % PING_HOST,
    "sudo systemctl start cron || true",
    "sudo systemctl start atd || true",
    "sudo systemctl start sendmail || true",
]

# CPU pinning (off by default)
ENABLE_PINNING = True

# Lower and upper bound for acceptable APERF/MPERF ratios
AMPERF_RATIO_BOUNDS = 0.995, 1.005

# Rough rate of change in APERF per second above which a core is considered busy.
# For many machines this is simply the base clock frequency, but generally
# speaking, is undefined, so you need to check on a per-machine basis.
AMPERF_BUSY_THRESHOLD = 3.4 * 1000 * 1000 * 1000 / 1000  # 3.4 GHz / 1000
